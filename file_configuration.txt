main
- run하는 부분
- traci.start
- argparser
- simulation(연습 자료 주고 받고, 일반적인 상황에서의 응급차 주행 시뮬레이션), training (RL 학습), 
- test(RL 결과확인: 1)Neural Net 불러와야되고, 2) option불러오기(파일이름,시간) )
- seed 고정
- hyperparameter 저장 기능 추가 (거의 필수)

Agent (RL)
- DQN, DDPG, etc.
- 행동이 여러개 (replay가능한 모델 저장(강화학습 친구 저장?))

Env(RL, traci 받는 것)
- State return: 정보들을 모두 받는 곳
- GYM style

Network(SUMO) 
- generating road structure
- vehicle
- traffic light
- edge, node, network, setting(색, 차량형태)
- 십자-> 늘려나가는 형식: xml 파일 클래스, ->상속: 원하는 도로구조 생성(클래스)
- 차량에서보면 lane 생성되는 차량의 양(random, non-random) trip(지정된), flow(랜덤), veh 지정 
- krauss, idm 
- 한 edge, 좌로 0.1 직진: 0.6 우회전: 0.3
- all straight상황 가정(초기)
- randomTrip.py 유턴 0.2, 좌 0.2, 직진:0.4~0.6 우회전:0.2 (3차선기준: 2차선 차들이 꼬임)
Logger(중간중간체크용, tensorboard, summarywriter) --> 요청
- loss, reward: 평균속도 ex)
- lr, epsilon-greedy(epsilon)
- performace: 도착하는데 걸린 시간 ex)

/////////////////////////////////////
Communication (Agent 연결)
- edgecloud
- 주고 받고
///////////////////////////////////////

초기 구성해야지만 진행이되는거
1. main
2. Network(차량(veh,route,speed), 도로구조(node,edge))
-- main, veh, road network
3. Agent, Env
4. logger,